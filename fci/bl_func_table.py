#!/usr/bin/python

import numpy as np
import matplotlib.pyplot as plt
from matplotlib import cm


class BFT(object):

    def __init__(self, precision=3):

        # array of wave vectors for non-zero elements
        if (precision == 1):
            self.G_pz=np.array([[ 0, 0, 0],
                            [ -1, -1, -1],
                            [ 1, 1, -1],
                            [ -1, 1, -1],
                            [ 1, -1, -1]])

            self.G_nz=np.array([[ 0, 0, 0],
                            [ 1, 1, 1],
                            [ -1, -1, 1],
                            [ 1, -1, 1],
                            [ -1, 1, 1]])

            self.G_py=np.array([[ 0, 0, 0],
                            [ -1, -1, -1],
                            [ 1, -1, 1],
                            [ -1, -1, 1],
                            [ 1, -1, -1]])

            self.G_ny=np.array([[ 0, 0, 0],
                            [ 1, 1, 1],
                            [ -1, 1, -1],
                            [ 1, 1, -1],
                            [ -1, 1, 1]])

            self.G_px=np.array([[ 0, 0, 0],
                            [ -1, -1, -1],
                            [ -1, 1, 1],
                            [ -1, 1, -1],
                            [ -1, -1, 1]])

            self.G_nx=np.array([[ 0, 0, 0],
                            [ 1, 1, 1],
                            [ 1,-1,-1],
                            [ 1,-1, 1],
                            [ 1, 1,-1]])

            self.c_pz_r=np.array([[0.3428], [-0.3131], [-0.3131], [-0.3131], [-0.3131]])
            self.c_pz_i=np.array([[0.0], [0.3131], [0.3131], [-0.3131], [-0.3131]])

        #--------------------------------------------
        elif (precision==2):
            self.G_pz=np.array([[ 0, 0, 0],
                            [ -1, -1, -1],
                            [ 1, 1, -1],
                            [ -1, 1, -1],
                            [ 1, -1, -1],
                            [ 2, 0, -2],
                            [ 0, 2, -2],
                            [ -2, 0, -2],
                            [ 0, -2, -2],
                            [ 1, -1, 1],
                            [ -1, 1, 1],
                            [ 1, 1, 1],
                            [ -1, -1, 1]])

            self.G_nz=np.array([[ 0, 0, 0],
                            [ 1, 1, 1],
                            [ -1, -1, 1],
                            [ 1, -1, 1],
                            [ -1, 1, 1],
                            [ -2, 0, 2],
                            [ 0, -2, 2],
                            [ 2, 0, 2],
                            [ 0, 2, 2],
                            [ -1, 1, -1],
                            [ 1, -1, -1],
                            [ -1, -1, -1],
                            [ 1, 1, -1]])

            self.G_py=np.array([[ 0, 0, 0],
                            [ -1, -1, -1],
                            [ 1, -1, 1],
                            [ -1, -1, 1],
                            [ 1, -1, -1],
                            [ 2, -2, 0],
                            [ 0, -2, 2],
                            [ -2, -2, 0],
                            [ 0, -2, -2],
                            [ 1, 1, -1],
                            [ -1, 1, 1],
                            [ 1, 1, 1],
                            [ -1, 1, -1]])

            self.G_ny=np.array([[ 0, 0, 0],
                            [ 1, 1, 1],
                            [ -1, 1, -1],
                            [ 1, 1, -1],
                            [ -1, 1, 1],
                            [ -2, 2, 0],
                            [ 0, 2, -2],
                            [ 2, 2, 0],
                            [ 0, 2, 2],
                            [ -1, -1, 1],
                            [ 1, -1, -1],
                            [ -1, -1, -1],
                            [ 1, -1, 1]])

            self.G_px=np.array([[ 0, 0, 0],
                            [ -1, -1, -1],
                            [ -1, 1, 1],
                            [ -1, 1, -1],
                            [ -1, -1, 1],
                            [ -2, 0, 2],
                            [ -2, 2, 0],
                            [ -2, 0, -2],
                            [ -2, -2, 0],
                            [ 1, -1, 1],
                            [ 1, 1, -1],
                            [ 1, 1, 1],
                            [ 1, -1, -1]])

            self.G_nx=np.array([[ 0, 0, 0],
                            [ 1, 1, 1],
                            [ 1,-1,-1],
                            [ 1,-1, 1],
                            [ 1, 1,-1],
                            [ 2, 0, -2],
                            [ 2, -2, 0],
                            [ 2, 0, 2],
                            [ 2, 2, 0],
                            [ -1, 1, -1],
                            [ -1, -1, 1],
                            [ -1, -1, -1],
                            [ -1, 1, 1]])

            self.c_pz_r=np.array([[0.3428], [-0.3131], [-0.3131], [-0.3131], [-0.3131],
                                  [-0.0986], [-0.0986], [-0.0986], [-0.0986],
                                  [0.0695], [0.0695], [0.0695], [0.0695]])
            self.c_pz_i=np.array([[0.0], [0.3131], [0.3131], [-0.3131], [-0.3131],
                                  [0.0], [0.0], [0.0], [0.0],
                                  [-0.0695], [-0.0695], [0.0695], [0.0695]])
        else:
            self.G_pz=np.array([[ 0, 0, 0],
                            [ -1, -1, -1],
                            [ 1, 1, -1],
                            [ -1, 1, -1],
                            [ 1, -1, -1],
                            [ 2, 0, -2],
                            [ 0, 2, -2],
                            [ -2, 0, -2],
                            [ 0, -2, -2],
                            [ 1, -1, 1],
                            [ -1, 1, 1],
                            [ 1, 1, 1],
                            [ -1, -1, 1],
                            [ -2, 2, -2],
                            [ 2, -2, -2],
                            [ -2, -2, -2],
                            [ 2, 2, -2],
                            [ 0, 2, 2],
                            [ 2, 0, 2],
                            [ 0, -2, 2],
                            [ -2, 0, 2]])

            self.G_nz=np.array([[ 0, 0, 0],
                            [ 1, 1, 1],
                            [ -1, -1, 1],
                            [ 1, -1, 1],
                            [ -1, 1, 1],
                            [ -2, 0, 2],
                            [ 0, -2, 2],
                            [ 2, 0, 2],
                            [ 0, 2, 2],
                            [ -1, 1, -1],
                            [ 1, -1, -1],
                            [ -1, -1, -1],
                            [ 1, 1, -1],
                            [ 2, -2, 2],
                            [ -2, 2, 2],
                            [ 2, 2, 2],
                            [ -2, -2, 2],
                            [ 0, -2, -2],
                            [ -2, 0, -2],
                            [ 0, 2, -2],
                            [ 2, 0, -2]])

            self.G_py=np.array([[ 0, 0, 0],
                            [ -1, -1, -1],
                            [ 1, -1, 1],
                            [ -1, -1, 1],
                            [ 1, -1, -1],
                            [ 2, -2, 0],
                            [ 0, -2, 2],
                            [ -2, -2, 0],
                            [ 0, -2, -2],
                            [ 1, 1, -1],
                            [ -1, 1, 1],
                            [ 1, 1, 1],
                            [ -1, 1, -1],
                            [ -2, -2, 2],
                            [ 2, -2, -2],
                            [ -2, -2, -2],
                            [ 2, -2, 2],
                            [ 0, 2, 2],
                            [ 2, 2, 0],
                            [ 0, 2, -2],
                            [ -2, 2, 0]])

            self.G_ny=np.array([[ 0, 0, 0],
                            [ 1, 1, 1],
                            [ -1, 1, -1],
                            [ 1, 1, -1],
                            [ -1, 1, 1],
                            [ -2, 2, 0],
                            [ 0, 2, -2],
                            [ 2, 2, 0],
                            [ 0, 2, 2],
                            [ -1, -1, 1],
                            [ 1, -1, -1],
                            [ -1, -1, -1],
                            [ 1, -1, 1],
                            [ 2, 2, -2],
                            [ -2, 2, 2],
                            [ 2, 2, 2],
                            [ -2, 2, -2],
                            [ 0, -2, -2],
                            [ -2, -2, 0],
                            [ 0, -2, 2],
                            [ 2, -2, 0]])

            self.G_px=np.array([[ 0, 0, 0],
                            [ -1, -1, -1],
                            [ -1, 1, 1],
                            [ -1, 1, -1],
                            [ -1, -1, 1],
                            [ -2, 0, 2],
                            [ -2, 2, 0],
                            [ -2, 0, -2],
                            [ -2, -2, 0],
                            [ 1, -1, 1],
                            [ 1, 1, -1],
                            [ 1, 1, 1],
                            [ 1, -1, -1],
                            [ -2, 2, -2],
                            [ -2, -2, 2],
                            [ -2, -2, -2],
                            [ -2, 2, 2],
                            [ 2, 2, 0],
                            [ 2, 0, 2],
                            [ 2, -2, 0],
                            [ 2, 0, -2]])

            self.G_nx=np.array([[ 0, 0, 0],
                            [ 1, 1, 1],
                            [ 1,-1,-1],
                            [ 1,-1, 1],
                            [ 1, 1,-1],
                            [ 2, 0, -2],
                            [ 2, -2, 0],
                            [ 2, 0, 2],
                            [ 2, 2, 0],
                            [ -1, 1, -1],
                            [ -1, -1, 1],
                            [ -1, -1, -1],
                            [ -1, 1, 1],
                            [ 2, -2, 2],
                            [ 2, 2, -2],
                            [ 2, 2, 2],
                            [ 2, -2, -2],
                            [ -2, -2, 0],
                            [ -2, 0, -2],
                            [ -2, 2, 0],
                            [ -2, 0, 2]])

            self.c_pz_r=np.array([[0.3428], [-0.3131], [-0.3131], [-0.3131], [-0.3131],
                                  [-0.0986], [-0.0986], [-0.0986], [-0.0986],
                                  [0.0695], [0.0695], [0.0695], [0.0695],
                                  [-0.0], [-0.0], [0.0], [0.0],
                                  [0.0387], [0.0387], [0.0387], [0.0387]])

            self.c_pz_i=np.array([[0.0], [0.3131], [0.3131], [-0.3131], [-0.3131],
                                  [0.0], [0.0], [0.0], [0.0],
                                  [-0.0695], [-0.0695], [0.0695], [0.0695],
                                  [-0.0451], [-0.0451], [0.0451], [0.0451],
                                  [-0.0], [-0.0], [-0.0], [-0.0]])
        # ---------------------------------------------


        self.c_pz=self.c_pz_r+1j*self.c_pz_i
        self.c_nz=np.conj(self.c_pz)
        self.c_py=self.c_pz
        self.c_ny=self.c_nz
        self.c_px=self.c_pz
        self.c_nx=self.c_nz

    def get_coef(self, G, valley):

        Gv={'z': self.G_pz,
            '-z': self.G_nz,
            'y': self.G_py,
            '-y': self.G_ny,
            'x': self.G_px,
            '-x': self.G_nx}[valley]

        c={'z': self.c_pz,
            '-z': self.c_nz,
            'y': self.c_py,
            '-y': self.c_ny,
            'x': self.c_px,
            '-x': self.c_nx}[valley]

        coef=0.0

        for j in xrange(5):
            if np.array_equal(Gv[j],G):
                coef=c[j]

        return coef

    def get_all_coef(self, valley):
        return {
            'z': np.hstack([self.G_pz, self.c_pz]),
            '-z': np.hstack([self.G_nz, self.c_nz]),
            'y': np.hstack([self.G_py, self.c_py]),
            '-y': np.hstack([self.G_ny, self.c_ny]),
            'x': np.hstack([self.G_px, self.c_px]),
            '-x': np.hstack([self.G_nx, self.c_nx]),
        }.get(valley, 0)

if __name__ == "__main__":

    bft = BFT()
    # print(bft.get_coef([0, 0, 0],'z'))

    coefs=bft.get_all_coef('x')

    x = np.linspace(-7.0, 7.0, 300)
    # xi, yi = np.mgrid[-7.0:7.0:300j, -7.0:7.0:300j]
    fun=np.zeros((300,300),dtype=complex)

    for j1 in xrange(300):
        for j2 in xrange(300):
            for j in xrange(21):
                fun[j1,j2]=fun[j1,j2]+coefs[j,3]*np.exp(1j*np.dot(coefs[j,0:3].T,[x[j1],x[j2],x[j2]]))

    fun=np.power(np.absolute(fun),2)

    fig, ax = plt.subplots()

    im = ax.imshow(fun , cmap=cm.jet, vmin=abs(fun).min(), vmax=abs(fun).max(), extent=[0, 1, 0, 1])
    #im.set_interpolation('bilinear')
    cb = fig.colorbar(im, ax=ax)

    plt.hold(True)
    plt.show()
